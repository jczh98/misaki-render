#include <misaki/core/spectrum.h>

namespace misaki {

// =======================================================================
//! @{ \name CIE 1931 2 degree observer implementation
// =======================================================================
static const float cie1931_tbl[MSK_CIE_SAMPLES * 3] = {
    float(0.000129900000), float(0.000232100000), float(0.000414900000),
    float(0.000741600000), float(0.001368000000), float(0.002236000000),
    float(0.004243000000), float(0.007650000000), float(0.014310000000),
    float(0.023190000000), float(0.043510000000), float(0.077630000000),
    float(0.134380000000), float(0.214770000000), float(0.283900000000),
    float(0.328500000000), float(0.348280000000), float(0.348060000000),
    float(0.336200000000), float(0.318700000000), float(0.290800000000),
    float(0.251100000000), float(0.195360000000), float(0.142100000000),
    float(0.095640000000), float(0.057950010000), float(0.032010000000),
    float(0.014700000000), float(0.004900000000), float(0.002400000000),
    float(0.009300000000), float(0.029100000000), float(0.063270000000),
    float(0.109600000000), float(0.165500000000), float(0.225749900000),
    float(0.290400000000), float(0.359700000000), float(0.433449900000),
    float(0.512050100000), float(0.594500000000), float(0.678400000000),
    float(0.762100000000), float(0.842500000000), float(0.916300000000),
    float(0.978600000000), float(1.026300000000), float(1.056700000000),
    float(1.062200000000), float(1.045600000000), float(1.002600000000),
    float(0.938400000000), float(0.854449900000), float(0.751400000000),
    float(0.642400000000), float(0.541900000000), float(0.447900000000),
    float(0.360800000000), float(0.283500000000), float(0.218700000000),
    float(0.164900000000), float(0.121200000000), float(0.087400000000),
    float(0.063600000000), float(0.046770000000), float(0.032900000000),
    float(0.022700000000), float(0.015840000000), float(0.011359160000),
    float(0.008110916000), float(0.005790346000), float(0.004109457000),
    float(0.002899327000), float(0.002049190000), float(0.001439971000),
    float(0.000999949300), float(0.000690078600), float(0.000476021300),
    float(0.000332301100), float(0.000234826100), float(0.000166150500),
    float(0.000117413000), float(0.000083075270), float(0.000058706520),
    float(0.000041509940), float(0.000029353260), float(0.000020673830),
    float(0.000014559770), float(0.000010253980), float(0.000007221456),
    float(0.000005085868), float(0.000003581652), float(0.000002522525),
    float(0.000001776509), float(0.000001251141),

    float(0.000003917000), float(0.000006965000), float(0.000012390000),
    float(0.000022020000), float(0.000039000000), float(0.000064000000),
    float(0.000120000000), float(0.000217000000), float(0.000396000000),
    float(0.000640000000), float(0.001210000000), float(0.002180000000),
    float(0.004000000000), float(0.007300000000), float(0.011600000000),
    float(0.016840000000), float(0.023000000000), float(0.029800000000),
    float(0.038000000000), float(0.048000000000), float(0.060000000000),
    float(0.073900000000), float(0.090980000000), float(0.112600000000),
    float(0.139020000000), float(0.169300000000), float(0.208020000000),
    float(0.258600000000), float(0.323000000000), float(0.407300000000),
    float(0.503000000000), float(0.608200000000), float(0.710000000000),
    float(0.793200000000), float(0.862000000000), float(0.914850100000),
    float(0.954000000000), float(0.980300000000), float(0.994950100000),
    float(1.000000000000), float(0.995000000000), float(0.978600000000),
    float(0.952000000000), float(0.915400000000), float(0.870000000000),
    float(0.816300000000), float(0.757000000000), float(0.694900000000),
    float(0.631000000000), float(0.566800000000), float(0.503000000000),
    float(0.441200000000), float(0.381000000000), float(0.321000000000),
    float(0.265000000000), float(0.217000000000), float(0.175000000000),
    float(0.138200000000), float(0.107000000000), float(0.081600000000),
    float(0.061000000000), float(0.044580000000), float(0.032000000000),
    float(0.023200000000), float(0.017000000000), float(0.011920000000),
    float(0.008210000000), float(0.005723000000), float(0.004102000000),
    float(0.002929000000), float(0.002091000000), float(0.001484000000),
    float(0.001047000000), float(0.000740000000), float(0.000520000000),
    float(0.000361100000), float(0.000249200000), float(0.000171900000),
    float(0.000120000000), float(0.000084800000), float(0.000060000000),
    float(0.000042400000), float(0.000030000000), float(0.000021200000),
    float(0.000014990000), float(0.000010600000), float(0.000007465700),
    float(0.000005257800), float(0.000003702900), float(0.000002607800),
    float(0.000001836600), float(0.000001293400), float(0.000000910930),
    float(0.000000641530), float(0.000000451810),

    float(0.000606100000), float(0.001086000000), float(0.001946000000),
    float(0.003486000000), float(0.006450001000), float(0.010549990000),
    float(0.020050010000), float(0.036210000000), float(0.067850010000),
    float(0.110200000000), float(0.207400000000), float(0.371300000000),
    float(0.645600000000), float(1.039050100000), float(1.385600000000),
    float(1.622960000000), float(1.747060000000), float(1.782600000000),
    float(1.772110000000), float(1.744100000000), float(1.669200000000),
    float(1.528100000000), float(1.287640000000), float(1.041900000000),
    float(0.812950100000), float(0.616200000000), float(0.465180000000),
    float(0.353300000000), float(0.272000000000), float(0.212300000000),
    float(0.158200000000), float(0.111700000000), float(0.078249990000),
    float(0.057250010000), float(0.042160000000), float(0.029840000000),
    float(0.020300000000), float(0.013400000000), float(0.008749999000),
    float(0.005749999000), float(0.003900000000), float(0.002749999000),
    float(0.002100000000), float(0.001800000000), float(0.001650001000),
    float(0.001400000000), float(0.001100000000), float(0.001000000000),
    float(0.000800000000), float(0.000600000000), float(0.000340000000),
    float(0.000240000000), float(0.000190000000), float(0.000100000000),
    float(0.000049999990), float(0.000030000000), float(0.000020000000),
    float(0.000010000000), float(0.000000000000), float(0.000000000000),
    float(0.000000000000), float(0.000000000000), float(0.000000000000),
    float(0.000000000000), float(0.000000000000), float(0.000000000000),
    float(0.000000000000), float(0.000000000000), float(0.000000000000),
    float(0.000000000000), float(0.000000000000), float(0.000000000000),
    float(0.000000000000), float(0.000000000000), float(0.000000000000),
    float(0.000000000000), float(0.000000000000), float(0.000000000000),
    float(0.000000000000), float(0.000000000000), float(0.000000000000),
    float(0.000000000000), float(0.000000000000), float(0.000000000000),
    float(0.000000000000), float(0.000000000000), float(0.000000000000),
    float(0.000000000000), float(0.000000000000), float(0.000000000000),
    float(0.000000000000), float(0.000000000000), float(0.000000000000),
    float(0.000000000000), float(0.000000000000)
};

const float *cie1931_x_data = cie1931_tbl;
const float *cie1931_y_data = cie1931_tbl + MSK_CIE_SAMPLES;
const float *cie1931_z_data = cie1931_tbl + MSK_CIE_SAMPLES * 2;

}